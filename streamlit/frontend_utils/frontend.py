import streamlit as st
import requests
from requests.structures import CaseInsensitiveDict
import pyperclip

API_URL = "http://localhost:8000/summarize/"


def summarize(
        text: str, min_length: int, max_length: int, length_penalty: float, 
        no_repeat_ngram_size: int, repetition_penalty: float, top_k: int, top_p: float,
        num_beams: int, temperature: float, model_name: str
) -> str:
    input_json = {
        "text": text, 
        "min_length": min_length, 
        "max_length": max_length, 
        "length_penalty": length_penalty, 
        "no_repeat_ngram_size": no_repeat_ngram_size, 
        "repetition_penalty": repetition_penalty, 
        "top_k": top_k, 
        "top_p": top_p, 
        "num_beams": num_beams, 
        "temperature": temperature, 
        "model_name": model_name
        }
    
    response = requests.post(API_URL, json=input_json)

    if response.status_code != 200:
        raise ValueError(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    
    return response.json()["summary"]

st.set_page_config(
    page_title="–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "# This is a header. This is an *extremely* cool app!"
    }
)
st.title("–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",)


header1 = st.header("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:")
text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:", label_visibility="collapsed")

model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", options=["ruT5-base", "FRED-T5-Large", "mBART"])

sum_button = st.button("–°–æ–∑–¥–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é")

with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"):
    st.markdown("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –¥–ª–∏–Ω–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏. –ü—Ä–∏ :green[length_penalty>0] –±—É–¥—É—Ç –ø–æ–æ—â—Ä—è—Ç—å—Å—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –ø—Ä–∏ :green[length_penalty<0] - –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ.")
    length_penalty = st.number_input("length_penalty", min_value=-10.0, max_value=20.0, value=1.0, step=0.1)
    st.divider()
    
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Ä–µ–∂–µ –±—É–¥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü—Ä–∏ :green[repetition_penalty=1] —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç.")
        repetition_penalty = st.number_input("repetition_penalty:", min_value=1.0, max_value=10.0, value=1.0, step=0.1)
        st.divider()
    
        st.markdown("–°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –ü—Ä–∏ :green[no_repeat_ngram_size>0] –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π –¥–ª–∏–Ω—ã –Ω–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        no_repeat_ngram_size = st.number_input("no_repeat_ngram_size:", min_value=0, max_value=10, value=3, step=1)
        st.divider()

        st.markdown("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∏—Å–ª—É —Ç–æ–∫–µ–Ω–æ–≤. –í —Å—Ä–µ–¥–Ω–µ–º —Å–ª–æ–≤–æ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è 1-3 —Ç–æ–∫–µ–Ω–∞–º–∏.")
        min_length = st.slider("min_length:", min_value=10, max_value=100, value=40, step=1)
        max_length = st.slider("max_length:", min_value=min_length, max_value=500, value=150, step=1)
        st.divider()

    with col2:
        st.markdown("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞. :green[top_k] —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —á–∏—Å–ª–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∞ :green[top_p] –æ—Ç—Å–µ–∫–∞–µ—Ç –¥–æ–ª—é –Ω–∞–∏–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.")
        top_k = st.number_input("top_k:", min_value=0, max_value=100, value=50, step=1)
        top_p = st.number_input("top_p:", min_value=0.0, max_value=1.0, value=1.0, step=0.1)
        st.divider()

        st.markdown('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª—å—é –ø—Ä–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ :green[num_beams] –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –∑–∞–º–µ–¥–ª–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å. –ü—Ä–∏ :green[num_beams=1] –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∂–∞–¥–Ω–æ–π.')
        num_beams = st.number_input("num_beams:", min_value=1, max_value=10, value=4, step=1)
        st.divider()
    
        st.markdown("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ß–µ–º –Ω–∏–∂–µ :green[temperature], —Ç–µ–º –¥–µ—Ç–µ—Ä–º–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ß–µ–º –≤—ã—à–µ, —Ç–µ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ, –Ω–æ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–Ω–µ–µ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.")
        temperature = st.number_input("temperature:", min_value=0.1, max_value=10.0, value=0.7, step=0.1)



if 'summary' not in st.session_state:
    st.session_state['summary'] = ''

if 'recent_summaries' not in st.session_state:
    st.session_state['recent_summaries'] = []

if 'recent_params' not in st.session_state:
    st.session_state['recent_params'] = []

if sum_button:
    summary = summarize(text, min_length, max_length, length_penalty, 
                        no_repeat_ngram_size, repetition_penalty, top_k, top_p,
                        num_beams, temperature, model_name)
    # summary = 'example text.'
    st.session_state['summary'] = summary
    tmp_params = {
        "min_length": min_length, 
        "max_length": max_length, 
        "length_penalty": length_penalty, 
        "no_repeat_ngram_size": no_repeat_ngram_size, 
        "repetition_penalty": repetition_penalty, 
        "top_k": top_k, 
        "top_p": top_p, 
        "num_beams": num_beams, 
        "temperature": temperature, 
        "model_name": model_name
    }

    st.session_state['recent_summaries'].insert(0, summary)
    st.session_state['recent_params'].insert(0, tmp_params)

    if len(st.session_state['recent_summaries']) > 10:
        st.session_state['recent_summaries'] = st.session_state['recent_summaries'][:10]
        st.session_state['recent_params'] = st.session_state['recent_params'][:10]



header2 = st.header("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:")
if st.session_state['summary'] != '':
    st.divider()
    st.write(st.session_state['summary'])
    st.divider()

copy_sum_button = st.button("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
if copy_sum_button:
    if st.session_state['summary'] == '':
        st.error('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é.', icon="‚ùå")
    else:
        pyperclip.copy(st.session_state['summary'])
        st.success('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', icon="‚úÖ")
    
    
with st.expander("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
    if st.session_state['summary'] != '':
        sum_file_name = st.text_input('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.', max_chars=50, placeholder='annotation')
        sum_download_button = st.download_button('–°–∫–∞—á–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt', data=st.session_state['summary'], file_name=sum_file_name+'.txt')
    else:
        st.error('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é.', icon="‚ùå")

# if st.session_state['recent_summaries']:
header3 = st.header("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
for recent_sum, recent_params in zip(st.session_state['recent_summaries'], st.session_state['recent_params']):
    st.write(recent_sum)
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        for param, value in recent_params.items():
            st.write(param + ': ' + str(value))
    st.divider()

